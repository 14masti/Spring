/*********************get slotcount for the given doctorID and given weekday ********************************/

CREATE OR REPLACE FUNCTION GetSlotCountForDoctor(docid integer, weekday integer)
RETURNS integer AS $$
DECLARE
    slot_count integer := 0;
    slot_record RECORD;  -- Declare a record variable outside the loop
BEGIN
    -- Iterate through doctor's available time slots
    FOR slot_record IN
        SELECT
            "doctorid",
            "doctorslotindex",
            "doctoravailablefrom"::time,
            "doctoravailableto"::time,
            "doctoravailableslot",
            "doctorschedule"
        FROM
            T2_doctorschedule 
        WHERE
            "doctorid" = docid
    LOOP
        -- Check if the specified weekday is included in the doctor's schedule
        IF position(weekday::text in slot_record.doctorschedule) > 0 THEN
            -- Calculate the slot intervals
            FOR i IN 0..((EXTRACT(EPOCH FROM (slot_record.doctoravailableto - slot_record.doctoravailablefrom)) / 60) / slot_record.doctoravailableslot - 1)::integer
            LOOP
                -- Increment the slot count
                slot_count := slot_count + 1;
            END LOOP;
        END IF;
    END LOOP;
    
    -- Return the slot count
    RETURN slot_count;
END;
$$ LANGUAGE plpgsql;





/****************************************getslotsfor the given docid and date from appointmentsslotcalendar******************************************/


create or Replace function getslotcountperdate(doctor_id integer,slot_date DATE)
returns integer as $$

Declare 
   res integer :=0;
BEGIN
	select count(*) into res  
	from appointmentsslotcalendar 
	where slotdoctorid=doctor_id 
	and slotdate=slot_date;
	
	return res;
END;
$$ LANGUAGE plpgsql;


select getslotcountperdate(6,'2023-09-25')

select * from appointmentsslotcalendar where slotdoctorid=6 and slotdate='2023-09-25'


/**********************************************procedure `1********************************/

select * from appointmentsslotcalendar;

select * from doctorschedule_bhaskar;



select * from GenerateAppointmentSlot(5,'2023-09-05');


CREATE OR REPLACE FUNCTION GenerateAppointmentSlot(doctor_id INT, today_date DATE) RETURNS VOID AS $$
DECLARE
    slot_exists INT;
    next_date DATE;
    current_day_of_week INT;
    res BOOLEAN;
    day_to_check TEXT;
BEGIN
    -- Check if a slot already exists for the current date
    SELECT COUNT(*) INTO slot_exists
    FROM appointmentsslotcalendar
    WHERE slotdoctorid = doctor_id AND slotdate = today_date;

    	current_day_of_week := EXTRACT(ISODOW FROM today_date);
    	-- Convert the current day of the week to a string to match the format in doctorschedule
        day_to_check := current_day_of_week::TEXT;

        -- Check if the day_to_check is present in doctorschedule
        SELECT EXISTS (
            SELECT 1
            FROM doctorschedule_bhaskar
            WHERE doctorid = doctor_id AND POSITION(day_to_check IN doctorschedule) > 0
        ) INTO res;

        IF res then
            -- Doctor is available, generate the slot
            PERFORM create_slots_for_doctor(doctor_id, today_date);
            -- You may want to commit the transaction here if needed
        ELSE
           RAISE NOTICE 'DATE IS %', today_date;
            RAISE NOTICE 'Doctor is not available on the current date';
        END IF;

END;
$$ LANGUAGE PLPGSQL;







CREATE OR REPLACE FUNCTION chinna(doctor_id INT, today_date DATE) RETURNS VOID AS $$
DECLARE
    slot_exists INT;
    next_date DATE;
    DUMMY TEXT;
    current_day_of_week INT;
    res BOOLEAN;
    day_to_check TEXT;
    availability_range INT;
BEGIN

 SELECT rangeofavail INTO availability_range
    FROM doc_availability
    WHERE docid = doctor_id;

         RAISE NOTICE 'entering into the availability_range'; 
        FOR i IN 1..availability_range LOOP
        
        	PERFORM GenerateAppointmentSlot(doctor_id,today_date);
   			today_date := today_date + 1;
   			RAISE NOTICE 'LOOP IS %',today_date;
    END LOOP;
   
END;
$$ LANGUAGE PLPGSQL;

SELECT GenerateAppointmentSlot(1, CURRENT_DATE)
select chinna(3,CURRENT_DATE)









select Insert_alldoctors()

CREATE OR REPLACE FUNCTION Insert_alldoctors() returns void as $$
BEGIN
   for i in 1..7 loop
    perform chinna(i,current_DATE);
	end loop;
END;
$$ LANGUAGE plpgsql;



