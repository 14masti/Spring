// function
CREATE OR REPLACE FUNCTION set_doctor_schedule_id()
RETURNS TRIGGER AS $$
declare 
maxSindex Int :=1;
BEGIN

	select max(doct_sindex) into maxSindex from doctorschedule21 where doct_id= New.doct_id;
    IF maxSindex IS NULL THEN
        maxSindex:=1;
    else
    maxSindex=maxSindex+1;
    end if;
	New.doct_sindex=maxSindex;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


//trigger
CREATE TRIGGER auto_set_doctor_schedule_id
BEFORE INSERT ON doctorschedule21
FOR EACH ROW
EXECUTE FUNCTION set_doctor_schedule_id();





select * from T2_doctorschedule;

CREATE OR REPLACE FUNCTION GetSlotCountForDoctor(docid integer, weekday integer)
RETURNS integer AS $$
DECLARE
    slot_count integer := 0;
    slot_record RECORD;  -- Declare a record variable outside the loop
BEGIN
    -- Iterate through doctor's available time slots
    FOR slot_record IN
        SELECT
            "doctorid",
            "doctorslotindex",
            "doctoravailablefrom"::time,
            "doctoravailableto"::time,
            "doctoravailableslot",
            "doctorschedule"
        FROM
            T2_doctorschedule 
        WHERE
            "doctorid" = docid
    LOOP
        -- Check if the specified weekday is included in the doctor's schedule
        IF position(weekday::text in slot_record.doctorschedule) > 0 THEN
            -- Calculate the slot intervals
            FOR i IN 0..((EXTRACT(EPOCH FROM (slot_record.doctoravailableto - slot_record.doctoravailablefrom)) / 60) / slot_record.doctoravailableslot - 1)::integer
            LOOP
                -- Increment the slot count
                slot_count := slot_count + 1;
            END LOOP;
        END IF;
    END LOOP;
    
    -- Return the slot count
    RETURN slot_count;
END;
$$ LANGUAGE plpgsql;

SELECT GetSlotCountForDoctor(6, 7);




create or Replace function getslotcountperdate(doctor_id integer,slot_date DATE)
returns integer as $$

Declare 
   res integer :=0;
BEGIN
	select count(*) into res  
	from appointmentsslotcalendar 
	where slotdoctorid=doctor_id 
	and slotdate=slot_date;
	
	return res;
END;
$$ LANGUAGE plpgsql;

select * from appointments_venu;











select * from doctorschedule_bhaskar

select getslotcountperdate(6,'2023-09-25')

select * from appointmentsslotcalendar where slotdoctorid=6 and slotdate='2023-09-25'




create table doc_availability(docid int primary key,rangeofavail int);
insert into doc_availability(docid,rangeofavail) values(1,45);
select * from doc_availability

create or replace procedure slotgenbasedondate(docid Integer,curr_date DATE)
Language plpgsql
as $$
DECLARE 
    doc_id integer;
    range_value integer;
	availrecord RECORD;
BEGIN
	select docid,rangeofavail into doc_id,range_value
	from doc_availability
	FOR availrecord IN 0..range_value
        IF position(EXTRACT(ISODOW FROM today_date)::text in slot_record.doctorschedule) > 0 THEN
        
    LOOP
        -- Check if the specified weekday is included in the doctor's schedule
        IF position(weekday::text in slot_record.doctorschedule) > 0 THEN
            -- Calculate the slot intervals
            FOR i IN 0..((EXTRACT(EPOCH FROM (slot_record.doctoravailableto - slot_record.doctoravailablefrom)) / 60) / slot_record.doctoravailableslot - 1)::integer
            LOOP
                -- Increment the slot count
                slot_count := slot_count + 1;
            END LOOP;
        END IF;
    END LOOP;
	
	
  
END
$$

select * from doc_availability;

CREATE OR REPLACE PROCEDURE CreateAppointmentsForDoctorWithChecks(docid integer, currentdate DATE)
LANGUAGE plpgsql
AS $$
DECLARE
    range_value integer;
    target_date DATE;
BEGIN
    -- Retrieve the range from the doc_availability table based on docid
    SELECT rangeofavail INTO range_value
    FROM doc_availability
    WHERE docid = docid;

    IF range_value IS NULL THEN
        RAISE EXCEPTION 'No range found for docid = %', docid;
        RETURN;
    END IF;

    -- Initialize the target_date with currentdate
    target_date := currentdate;

    -- Iterate through a range of dates from currentdate to currentdate + range_value
    FOR i IN 1..range_value LOOP
        -- Check if the target_date does not exist in the appointmentslotcalendar table
        IF NOT EXISTS (
            SELECT 1
            FROM appointmentsslotcalendar
            WHERE slotdoctorid = docid
            AND slotdate = target_date
        ) THEN
            -- Check if the doctor is available on the target_date using GetSlotCountForDoctor
            IF GetSlotCountForDoctor(docid, EXTRACT(ISODOW FROM target_date)::integer) > 0 THEN
                -- Check if the target_date is within the allowed range using getslotcountperdate
                IF getslotcountperdate(docid, target_date) < 5 THEN
                    -- Insert the record into appointmentslotcalendar with some conditions
                    INSERT INTO appointmentslotcalendar (slotdoctorid, slotdate, slotfrom, slotto, slotstatus)
                    VALUES (
                        docid,
                        target_date,
                        '08:00:00',  -- You can customize the slot start time
                        '09:00:00',  -- You can customize the slot end time
                        'available'
                    );
                END IF;
            END IF;
        END IF;

        -- Increment the target_date for the next iteration
        target_date := target_date + 1;  -- Add one day
    END LOOP;
END;
$$;




